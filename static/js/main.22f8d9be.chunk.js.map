{"version":3,"sources":["components/Notemodules.js","components/Sidebar.js","components/Editor.js","App.js","serviceWorker.js","index.js"],"names":["Notemodules","props","className","style","spellCheck","onClick","click","bind","index","value","name","onChange","e","change","target","Sidebar","addNote","newState","state","numNotes","Notes","push","shiftEditor","currentEditing","changeName","newName","parentState","notespanel","this","map","Note","backgroundColor","React","Component","Editor","changeContent","setState","newValue","content","App","writeToEditor","input","copyState","writeToSidebar","render","document","title","toUpperCase","localStorage","getItem","JSON","parse","isLoading","nextProps","nextState","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2TASeA,G,MANK,SAACC,GAClB,OACG,2BAAOC,UAAU,eAAeC,MAAOF,EAAME,MAAOC,WAAW,QAAQC,QAASJ,EAAMK,MAAMC,U,EAAWN,EAAMO,OAAQC,MAAOR,EAAMS,KAAMC,SAAU,SAAAC,GAAC,OAAIX,EAAMY,OAAOD,EAAEE,OAAOL,MAAMR,EAAMO,YCmEhLO,E,kDAnEZ,WAAYd,GAAQ,IAAD,8BAChB,cAAMA,IAMTe,QAAU,WACP,IAAIC,EAAQ,eAAQ,EAAKhB,MAAMiB,OAC/BD,EAASE,WACTF,EAASG,MAAMC,KAAK,CAAEX,KAAM,QAAUO,EAASE,SAAUV,MAAO,KAEhE,EAAKR,MAAMY,OAAOI,IAZF,EAenBK,YAAc,SAACd,GACZ,IAAIS,EAAQ,eAAQ,EAAKhB,MAAMiB,OAC/BD,EAASM,eAAiBf,EAC1B,EAAKP,MAAMY,OAAOI,IAlBF,EAqBnBO,WAAa,SAACC,EAAQjB,GACnB,IAAIS,EAAQ,eAAQ,EAAKhB,MAAMiB,OAC/BD,EAASG,MAAMZ,GAAOE,KAAOe,EAE7B,EAAKxB,MAAMY,OAAOI,IAvBlB,EAAKC,MAAQ,CACVQ,YAAY,eAAM,EAAKzB,MAAMiB,QAHhB,E,qDA4BT,IACHS,EADE,OAwBN,OAtBAA,EAAaC,KAAKV,MAAMQ,YAAYN,MAAMS,KAAI,SAACC,EAAMtB,GAClD,OAAIA,IAAU,EAAKP,MAAMiB,MAAMK,eAEzB,kBAAC,EAAD,CACGjB,MAAO,EAAKgB,YACZT,OAAQ,EAAKW,WACbrB,MAAO,CAAE4B,gBAAiB,WAC1BrB,KAAMoB,EAAKpB,KACXF,MAAOA,IAKV,kBAAC,EAAD,CACGF,MAAO,EAAKgB,YACZT,OAAQ,EAAKW,WACbrB,MAAO,CAAE4B,gBAAiB,WAC1BrB,KAAMoB,EAAKpB,KACXF,MAAOA,OAKhB,yBAAKN,UAAU,wBAAf,WAEG,4BACGA,UAAU,6BACVG,QAASuB,KAAKZ,SAFjB,cAMA,yBAAKd,UAAU,YAAYyB,Q,GA9DjBK,IAAMC,WC4BbC,G,wDA5BZ,WAAYjC,GAAQ,IAAD,8BAChB,cAAMA,IAQTkC,cAAgB,SAACvB,GACd,EAAKwB,SAAS,CAACC,SAAWzB,EAAEE,OAAOL,QACnC,EAAKR,MAAMY,OAAOD,EAAEE,OAAOL,QAR3B,EAAKS,MAAQ,CACVmB,SAAU,EAAKpC,MAAMqC,SAJR,E,qDAcT,IAAD,OACN,OACG,yBAAKpC,UAAU,6BAAf,SAEG,8BACGA,UAAU,gBACVO,MAAOmB,KAAK3B,MAAMqC,QAClB3B,SAAU,SAACC,GAAD,OAAO,EAAKuB,cAAcvB,W,GAtB9BoB,IAAMC,YC0DZM,G,kNAvDZrB,MAAQ,CACLC,SAAU,EACVC,MAAO,CAAC,CAAEV,KAAM,SAAUD,MAAO,KACjCc,eAAgB,G,EAanBiB,cAAgB,SAACC,GACd,IAAIC,EAAS,eAAQ,EAAKxB,OAC1BwB,EAAUtB,MAAMsB,EAAUnB,gBAAgBd,MAAQgC,EAClD,EAAKL,SAASM,I,EAGjBC,eAAiB,SAAC1B,GACf,EAAKmB,SAASnB,I,EAYjB2B,OAAS,WAKN,OAJAC,SAASC,MACN,gBACA,EAAK5B,MAAME,MAAM,EAAKF,MAAMK,gBAAgBb,KAAKqC,cACjD,IAGA,yBAAK7C,UAAU,qBACZ,wBAAIA,UAAU,UAAd,eACA,kBAAC,EAAD,CAASgB,MAAO,EAAKA,MAAOL,OAAQ,EAAK8B,iBACzC,kBAAC,EAAD,CACGzB,MAAO,EAAKA,MACZL,OAAQ,EAAK2B,cACbF,QAAS,EAAKpB,MAAME,MAAM,EAAKF,MAAMK,gBAAgBd,U,mEAzC1DuC,aAAaC,QAAQ,UACtBrB,KAAKQ,SAAS,CACXhB,MAAO8B,KAAKC,MAAMH,aAAaC,QAAQ,UACvC9B,SAAU6B,aAAaC,QAAQ,YAC/BG,WAAW,M,0CAmBAC,EAAWC,GAC5BN,aAAaO,QAAQ,QAASL,KAAKM,UAAUF,EAAUlC,QACvD4B,aAAaO,QAAQ,WAAYD,EAAUnC,c,GAjC/Ba,IAAMC,YCOJwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASlB,OACP,kBAAC,IAAMmB,WAAP,KACE,kBAAC,EAAD,OAEFlB,SAASmB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.22f8d9be.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Notemodules = (props) => {\r\n   return (\r\n      <input className=\"w95 noteHead\" style={props.style} spellCheck=\"false\" onClick={props.click.bind(this, props.index)} value={props.name} onChange={e => props.change(e.target.value,props.index)}/>\r\n   );\r\n}\r\n\r\nexport default Notemodules;","import React from \"react\";\r\nimport \"../styles/Sidebar.css\";\r\nimport Notemodules from \"./Notemodules\";\r\n\r\nclass Sidebar extends React.Component {\r\n   constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n         parentState: { ...this.props.state },\r\n      };\r\n   }\r\n\r\n   addNote = () => {\r\n      let newState = { ...this.props.state };\r\n      newState.numNotes++;\r\n      newState.Notes.push({ name: \"Note \" + newState.numNotes, value: \"\" });\r\n\r\n      this.props.change(newState);\r\n   };\r\n\r\n   shiftEditor = (index) => {\r\n      let newState = { ...this.props.state };\r\n      newState.currentEditing = index;\r\n      this.props.change(newState);\r\n   };\r\n\r\n   changeName = (newName,index) => {\r\n      let newState = { ...this.props.state };\r\n      newState.Notes[index].name = newName;\r\n\r\n      this.props.change(newState);\r\n   };\r\n\r\n   render() {\r\n      let notespanel = null;\r\n      notespanel = this.state.parentState.Notes.map((Note, index) => {\r\n         if (index === this.props.state.currentEditing)\r\n            return (\r\n               <Notemodules\r\n                  click={this.shiftEditor}\r\n                  change={this.changeName}\r\n                  style={{ backgroundColor: \"#fffccc\" }}\r\n                  name={Note.name}\r\n                  index={index}\r\n               ></Notemodules>\r\n            );\r\n         else\r\n            return (\r\n               <Notemodules\r\n                  click={this.shiftEditor}\r\n                  change={this.changeName}\r\n                  style={{ backgroundColor: \"#fffffc\" }}\r\n                  name={Note.name}\r\n                  index={index}\r\n               ></Notemodules>\r\n            );\r\n      });\r\n      return (\r\n         <div className=\"w35 ibl p50 caps tac\">\r\n            MY Notes\r\n            <button\r\n               className=\"w100 block bgtrans newnote\"\r\n               onClick={this.addNote}\r\n            >\r\n               + ADD NOTE\r\n            </button>\r\n            <div className=\" sidebar\">{notespanel}</div>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\nexport default Sidebar;\r\n","import React from \"react\";\r\nimport \"../styles/Editor.css\";\r\n\r\nclass Editor extends React.Component {\r\n   constructor(props) {\r\n      super(props);\r\n\r\n      this.state = {\r\n         newValue: this.props.content\r\n      };\r\n   }\r\n\r\n\r\n   changeContent = (e) => {\r\n      this.setState({newValue : e.target.value})\r\n      this.props.change(e.target.value);\r\n   };\r\n\r\n   render() {\r\n      return (\r\n         <div className=\"w65 ibl p40 tac caps edit\">\r\n            Editor\r\n            <textarea\r\n               className=\"editArea w100\"\r\n               value={this.props.content}\r\n               onChange={(e) => this.changeContent(e)}\r\n            ></textarea>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\nexport default Editor;\r\n","import React from \"react\";\r\nimport Sidebar from \"./components/Sidebar\";\r\nimport Editor from \"./components/Editor\";\r\nimport \"./App.css\";\r\n\r\nclass App extends React.Component {\r\n   state = {\r\n      numNotes: 1,\r\n      Notes: [{ name: \"Note 1\", value: \"\" }],\r\n      currentEditing: 0,\r\n   };\r\n\r\n   componentWillMount() {\r\n      if (localStorage.getItem(\"Notes\")) {\r\n         this.setState({\r\n            Notes: JSON.parse(localStorage.getItem(\"Notes\")),\r\n            numNotes: localStorage.getItem(\"NumNotes\"),\r\n            isLoading: false,\r\n         });\r\n      }\r\n   }\r\n\r\n   writeToEditor = (input) => {\r\n      let copyState = { ...this.state };\r\n      copyState.Notes[copyState.currentEditing].value = input;\r\n      this.setState(copyState);\r\n   };\r\n\r\n   writeToSidebar = (newState) => {\r\n      this.setState(newState);\r\n   };\r\n\r\n   // componentDidUpdate() {\r\n   //    console.log(this.state.Notes[this.state.currentEditing].value);\r\n   // }\r\n\r\n   componentWillUpdate(nextProps, nextState) {\r\n      localStorage.setItem(\"Notes\", JSON.stringify(nextState.Notes));\r\n      localStorage.setItem(\"NumNotes\", nextState.numNotes);\r\n   }\r\n\r\n   render = () => {\r\n      document.title =\r\n         \"Note Editor (\" +\r\n         this.state.Notes[this.state.currentEditing].name.toUpperCase() +\r\n         \")\";\r\n      return (\r\n         //Here goes the code that has to be returned.\r\n         <div className=\"vh100 bggreen App\">\r\n            <h1 className=\"header\">Note Editor</h1>\r\n            <Sidebar state={this.state} change={this.writeToSidebar} />\r\n            <Editor\r\n               state={this.state}\r\n               change={this.writeToEditor}\r\n               content={this.state.Notes[this.state.currentEditing].value}\r\n            />\r\n         </div>\r\n      );\r\n   };\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}